
import OpenAI from 'openai';
import { OPENAI_API_KEY } from '../../config/constants';

// Initialize and export OpenAI client with better error handling
export const initializeOpenAI = () => {
  // Enhanced API key validation with detailed error messages
  if (!OPENAI_API_KEY || OPENAI_API_KEY.trim() === '') {
    console.error("CRITICAL ERROR: OPENAI_API_KEY is missing or empty");
    throw new Error('OpenAI API key is missing or empty. Please check your Supabase secrets.');
  }
  
  // Log a masked version of the key for debugging
  console.log("Initializing OpenAI with API key (first few chars):", 
    OPENAI_API_KEY ? `${OPENAI_API_KEY.substring(0, 5)}...` : "MISSING");
  console.log("API key length:", OPENAI_API_KEY.length);

  try {
    return new OpenAI({
      apiKey: OPENAI_API_KEY,
      dangerouslyAllowBrowser: true  // Required for client-side usage
    });
  } catch (error) {
    console.error("Failed to initialize OpenAI client:", error);
    throw new Error(`Failed to initialize OpenAI: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Function to generate content using OpenAI with improved error handling
export const generateAIContent = async (
  systemPrompt: string, 
  userPrompt: string,
  options = { temperature: 0.7, maxTokens: 1500 }
): Promise<string> => {
  try {
    console.log('Initializing OpenAI client for content generation');
    const openai = initializeOpenAI();
    
    console.log('Preparing OpenAI API call with:');
    console.log('- System prompt:', systemPrompt);
    console.log('- User prompt length:', userPrompt.length);
    console.log('- Temperature:', options.temperature);
    console.log('- Max tokens:', options.maxTokens);
    
    // Use the configured API key from Supabase secrets
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Using a supported model
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: options.temperature,
      max_tokens: options.maxTokens
    });

    console.log('OpenAI Response received:');
    console.log('- Finish reason:', response.choices[0]?.finish_reason);
    console.log('- Response ID:', response.id);
    console.log('- Model used:', response.model);
    console.log('- Completion tokens:', response.usage?.completion_tokens);

    // Extract and validate generated text
    const generatedText = response.choices[0]?.message?.content?.trim();
    
    if (!generatedText) {
      console.error('No content was generated by the AI');
      throw new Error('No content was generated by the AI. Please try again.');
    }
    
    console.log('Generated text successfully (length):', generatedText.length);
    // Log the first 100 chars for debugging
    console.log('Text preview:', generatedText.substring(0, 100) + '...');
    
    return generatedText;
  } catch (error) {
    console.error('ERROR GENERATING AI CONTENT:', error);
    
    // More informative error handling
    if (error instanceof OpenAI.APIError) {
      console.error('OpenAI API Error details:');
      console.error('- Status:', error.status);
      console.error('- Message:', error.message);
      console.error('- Type:', error.type);
      console.error('- Code:', error.code);
      
      if (error.status === 401) {
        throw new Error(`Authentication error: Invalid API key. Please check your OpenAI API key in Supabase secrets.`);
      } else if (error.status === 429) {
        throw new Error(`Rate limit exceeded: ${error.message}. Please try again in a few moments.`);
      } else if (error.status === 500) {
        throw new Error(`OpenAI server error: ${error.message}. Please try again later.`);
      } else {
        throw new Error(`OpenAI API Error (${error.status}): ${error.message}`);
      }
    }
    
    throw new Error(`Failed to generate content: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
